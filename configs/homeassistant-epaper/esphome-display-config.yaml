substitutions:
  name: "epaper-display-buero"
  friendly_name: KG.Büro ePaper Display

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: "1.0"
  # Boot script to update the screen on boot after the initial data was received
  on_boot:
    priority: 200.0
    then:
      - component.update: screen
      - wait_until:
          condition:
            lambda: "return id(data_updated) == true;"
        # Wait a bit longer so all the items are received at once
      - delay: 1s
      - logger.log: "Initial sensor data received: Refreshing display..."
      - lambda: "id(initial_data_received) = true;"
      - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  platform: esphome

# WiFi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Connect without scanning first.
  # Better when only one network is available.
  # fast_connect: True
  # Disable power saving to avoid disconnects from router
  # Ping for NONE: ~5ms, ping for LIGHT (default): ~50-300ms
  # power_save_mode: NONE
  domain: ""

  manual_ip:
    static_ip: 192.168.1.123
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
# This needs to be disabled for reliable WiFi when used with the Waveshare display!
# esp32_improv:
#  authorizer: none

# Enable the web portal
web_server:

# Google Fonts
font:
  # Icons
  - file: "gfonts://Material+Symbols+Outlined"
    id: icons_large
    size: 96 # Optical size (square): 72 px. Put 10px below font_large_bold text to visually align.
    # For the code points (see https://fonts.google.com/icons)
    # HA states from core/homeassistant/components/weather//__init__.py
    glyphs: &weather_icons
      - "\U0000ef44" # clear-night // mdi-bedtime
      - "\U0000e2bd" # cloudy // mdi-cloud
      - "\U0000f3cc" # exceptional // mdi-cloud-alert
      - "\U0000e818" # fog // mdi-foggy
      - "\U0000f67f" # hail // mdi-hail
      - "\U0000ebdb" # lightning and lightning-rainy // mdi-thunderstorm
      - "\U0000f172" # partlycloudy // mdi-partly-cloudy-day
      - "\U0000f176" # pouring and rainy // mdi-rainy
      - "\U0000e2cd" # snowy and snowy-rainy // mdi-weather-snowy
      - "\U0000e81a" # sunny // mdi-sunny
      - "\U0000f070" # windy and windy-variant // mdi-storm
      # - "\U0000eb36" # test only square
  - file: "gfonts://Material+Symbols+Outlined"
    id: icons_medium
    size: 36 # Optical size (square): 28 px, push down 4px to align bottom with baseline (square)
    glyphs: *weather_icons

  # Fonts
  - file: "gfonts://IBM+Plex+Sans@700"
    id: font_large_bold
    size: 108 # For this font, the actual height of a capital letter is 78 px
    # Add some german umlauts to the default list
    glyphs: &font_glyphs
      - "!"
      - '"'
      - "%"
      - "("
      - ")"
      - "+"
      - "="
      - ","
      - "-"
      - "_"
      - "."
      - ":"
      - "°"
      - "/"
      - "?"
      - "#"
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      - "A"
      - "B"
      - "C"
      - "D"
      - "E"
      - "F"
      - "G"
      - "H"
      - "I"
      - "J"
      - "K"
      - "L"
      - "M"
      - "N"
      - "O"
      - "P"
      - "Q"
      - "R"
      - "S"
      - "T"
      - "U"
      - "V"
      - "W"
      - "X"
      - "Y"
      - "Z"
      - "Ä"
      - "Ö"
      - "Ü"
      - " "
      - "a"
      - "b"
      - "c"
      - "d"
      - "e"
      - "f"
      - "g"
      - "h"
      - "i"
      - "j"
      - "k"
      - "l"
      - "m"
      - "n"
      - "o"
      - "p"
      - "q"
      - "r"
      - "s"
      - "t"
      - "u"
      - "v"
      - "w"
      - "x"
      - "y"
      - "z"
      - "ä"
      - "ö"
      - "ü"
      - "ß"
  - file: "gfonts://IBM+Plex+Sans@700"
    id: font_small_bold
    size: 18 # For this font, the actual height of a capital letter is 14 px
    glyphs: *font_glyphs
  - file: "gfonts://IBM+Plex+Sans@500"
    id: font_small_medium
    size: 18 # For this font, the actual height of a capital letter is 14 px
    glyphs: *font_glyphs
  - file: "gfonts://IBM+Plex+Sans@700"
    id: font_tiny_bold
    size: 12 # For this font, the actual height of a capital letter is 9 px
    glyphs: *font_glyphs

# Define foreground and background
# Only white 0% and 100% are supported for this display
color:
  - id: color_text
    white: 100% # Black
  - id: color_bg
    white: 0% # White

# Pins for Waveshare ePaper ESP Board
spi:
  # SPI Clock Pin
  clk_pin: GPIO13
  # SPI Master Out Slave In Pin
  mosi_pin: GPIO14

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  # Some data was updated (-> the screen needs to be refreshed)
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: "false"
  # The connection with Home Assistant was established
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: "false"
  # How often the screen was actually refreshed since boot
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: "0"

# Update the screen once per minute, but only when there is new sensor data.
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: "return id(data_updated) == true;"
              then:
                - if:
                    condition:
                      binary_sensor.is_on: refresh_enabled
                    then:
                      - logger.log: "Sensor data updated and refreshing enabled: Refreshing display."
                      - script.execute: update_screen
                    else:
                      - logger.log: "Sensor data updated but refreshing is disabled: Skipping refresh."
              else:
                - logger.log: "No sensors updated: Skipping refresh."
      # Daily refresh at 3 AM to prevent burn-in
      - seconds: 0
        minutes: 0
        hours: 3
        then:
          - logger.log: "Performing daily refresh to prevent burn-in"
          - script.execute: update_screen

# Enable updating of the screen (this can be set e.g. time based or when motion is in the room)
binary_sensor:
  - platform: homeassistant
    entity_id: input_boolean.kg_buero_display_refresh_enabled
    id: refresh_enabled

# Script for updating screen and updating the variables
script:
  - id: update_screen
    then:
      # Reset the update tracker
      - lambda: "id(data_updated) = false;"
      # Refresh the screen
      - component.update: screen
      # Stats: Count the number of refreshes and when the last one was done
      - lambda: "id(recorded_display_refresh) += 1;"
      - lambda: "id(display_last_refresh).publish_state(id(homeassistant_time).now().timestamp);"

# Home Assistant sensors
sensor:
  # Date of last refresh
  - platform: template
    name: "Last Refresh"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_refresh

  # Total number of refreshes
  - platform: template
    name: "Refreshes"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    entity_category: "diagnostic"
    lambda: "return id(recorded_display_refresh);"

  # WiFi signal strength
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  # Weather - Temperature
  - platform: homeassistant
    entity_id: weather.burgwedeler
    attribute: temperature
    id: weather_temperature
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  # Weather - Temperature in 0h
  - platform: homeassistant
    entity_id: sensor.wetter_in_0h_temperatur
    id: weather_temperature_0h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  # Weather - Temperature in 1h
  - platform: homeassistant
    entity_id: sensor.wetter_in_1h_temperatur
    id: weather_temperature_1h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  # Weather - Temperature in 2h
  - platform: homeassistant
    entity_id: sensor.wetter_in_2h_temperatur
    id: weather_temperature_2h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  # Weather - Temperature in 3h
  - platform: homeassistant
    entity_id: sensor.wetter_in_3h_temperatur
    id: weather_temperature_3h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

text_sensor:
  # Weather - Condition
  - platform: homeassistant
    entity_id: weather.burgwedeler
    id: weather_condition
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Condition in 0h
  - platform: homeassistant
    entity_id: sensor.wetter_in_0h
    id: weather_condition_0h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Condition in 1h
  - platform: homeassistant
    entity_id: sensor.wetter_in_1h
    id: weather_condition_1h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Condition in 2h
  - platform: homeassistant
    entity_id: sensor.wetter_in_2h
    id: weather_condition_2h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Condition in 3h
  - platform: homeassistant
    entity_id: sensor.wetter_in_3h
    id: weather_condition_3h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Time in 0h
  - platform: homeassistant
    entity_id: sensor.wetter_in_0h_zeit
    id: weather_time_0h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Time in 1h
  - platform: homeassistant
    entity_id: sensor.wetter_in_1h_zeit
    id: weather_time_1h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Time in 2h
  - platform: homeassistant
    entity_id: sensor.wetter_in_2h_zeit
    id: weather_time_2h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Weather - Time in 3h
  - platform: homeassistant
    entity_id: sensor.wetter_in_3h_zeit
    id: weather_time_3h
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Calendar - Title
  - platform: homeassistant
    entity_id: calendar.eiko_wagenknecht
    attribute: message
    id: next_event_title_1
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Calendar - Start Time
  - platform: homeassistant
    entity_id: calendar.eiko_wagenknecht
    attribute: start_time
    id: next_event_start_1
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Calendar 2 - Title
  - platform: homeassistant
    entity_id: calendar.gemeinsame_termine
    attribute: message
    id: next_event_title_2
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Calendar 2- Start Time
  - platform: homeassistant
    entity_id: calendar.gemeinsame_termine
    attribute: start_time
    id: next_event_start_2
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

button:
  - platform: shutdown
    name: "Shutdown"
  - platform: restart
    name: "Restart"
  - platform: template
    name: "Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

# Waveshare display configuration and actually displaying the data
display:
  - platform: waveshare_epaper
    id: screen
    # Chip Select Pin
    cs_pin: GPIO15
    # Data/Command Pin
    dc_pin: GPIO27
    # Busy Pin
    busy_pin:
      number: GPIO25
      inverted: true
    # Reset Pin
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2alt
    # Do not update automatically. We do this by a custom boot script + timer.
    update_interval: never
    # Show in portrait mode
    rotation: 90°
    # Resolution (portrait): x=480, y=800
    lambda: |-
      // Helper: Map weather states to icons
      std::map<std::string, std::string> weather_icon_map = {
        {"clear-night", "\U0000ef44"}, // test square: "\U0000eb36"
        {"cloudy", "\U0000e2bd"},
        {"exceptional", "\U0000f3cc"},
        {"fog", "\U0000e818"},
        {"hail", "\U0000f67f"},
        {"lightning", "\U0000ebdb"},
        {"lightning-rainy", "\U0000ebdb"},
        {"partlycloudy", "\U0000f172"},
        {"pouring", "\U0000f176"},
        {"rainy", "\U0000f176"},
        {"snowy", "\U0000e2cd"},
        {"snowy-rainy", "\U0000e2cd"},
        {"sunny", "\U0000e81a"},
        {"windy", "\U0000f070"},
        {"windy-variant", "\U0000f070"}
      };

      // Helper: Parse Unix Timestamp
      auto parse_unix_timestamp = [](const char* timestamp) -> time_t {
        struct tm tm = {};
        // Parse ISO 8601 timestamp
        strptime(timestamp, "%Y-%m-%dT%H:%M:%S%z", &tm);
        return mktime(&tm);
      };

      // Helper: Current Time
      time_t currentTime = id(homeassistant_time).now().timestamp;

      if (id(initial_data_received) == false) {
        // Booting up screen
        it.printf(240, 390, id(font_small_bold), color_text, TextAlign::BASELINE_CENTER, "BOOTED, WAITING FOR DATA...");
      } else {
        // Weather: Temperature
        it.printf(160, 300, id(font_large_bold), color_text, TextAlign::BASELINE_LEFT, "%.0f°C", id(weather_temperature).state);

        // Weather: Condition icon
        // 10 pixel below text to center align with it visually
        it.printf(150, 300 + 10, id(icons_large), color_text, TextAlign::BASELINE_RIGHT, "%s", weather_icon_map[id(weather_condition).state.c_str()].c_str());

        // Layout helpers
        //it.line(20, 300, 240, 300, color_text); // Baseline
        //it.line(20, 300 - 78, 240, 300 - 78, color_text); // Top

        // Hour: Baseline = 0px
        // Icon: Baseline = 8px (margin) + 28px (icon size) + 4px (icon offset) = 40px
        // Temp: Baseline = 8px (margin) + 28px (icon size) + 14px (text size) + 8px (margin) = 58px

        // Weather: In 0h
        it.printf(105, 340, id(font_small_medium), color_text, TextAlign::BASELINE_CENTER, "%s", id(weather_time_0h).state.c_str());
        it.printf(105, 340 + 40, id(icons_medium), color_text, TextAlign::BASELINE_CENTER, "%s", weather_icon_map[id(weather_condition_0h).state.c_str()].c_str());
        it.printf(105, 340 + 58, id(font_small_bold), color_text, TextAlign::BASELINE_CENTER, "%2.0f°C", id(weather_temperature_0h).state);

        // Weather: In 1h
        it.printf(195, 340, id(font_small_medium), color_text, TextAlign::BASELINE_CENTER, "%s", id(weather_time_1h).state.c_str());
        it.printf(195, 340 + 40, id(icons_medium), color_text, TextAlign::BASELINE_CENTER, "%s", weather_icon_map[id(weather_condition_1h).state.c_str()].c_str());
        it.printf(195, 340 + 58, id(font_small_bold), color_text, TextAlign::BASELINE_CENTER, "%2.0f°C", id(weather_temperature_1h).state);

        // Weather: In 2h
        it.printf(285, 340, id(font_small_medium), color_text, TextAlign::BASELINE_CENTER, "%s", id(weather_time_2h).state.c_str());
        it.printf(285, 340 + 40, id(icons_medium), color_text, TextAlign::BASELINE_CENTER, "%s", weather_icon_map[id(weather_condition_2h).state.c_str()].c_str());
        it.printf(285, 340 + 58, id(font_small_bold), color_text, TextAlign::BASELINE_CENTER, "%2.0f°C", id(weather_temperature_2h).state);

        // Weather: In 3h
        it.printf(375, 340, id(font_small_medium), color_text, TextAlign::BASELINE_CENTER, "%s", id(weather_time_3h).state.c_str());
        it.printf(375, 340 + 40, id(icons_medium), color_text, TextAlign::BASELINE_CENTER, "%s", weather_icon_map[id(weather_condition_3h).state.c_str()].c_str());
        it.printf(375, 340 + 58, id(font_small_bold), color_text, TextAlign::BASELINE_CENTER, "%2.0f°C", id(weather_temperature_3h).state);

        // Calendar
        auto parse_event_time = [](const std::string& time_str) -> time_t {
          struct tm event_tm = {};
          strptime(time_str.c_str(), "%Y-%m-%d %H:%M:%S", &event_tm);
          event_tm.tm_isdst = -1;
          return mktime(&event_tm);
        };

        // Array of text_sensor IDs for calendars - add more as needed
        std::vector<std::pair<text_sensor::TextSensor*, text_sensor::TextSensor*>> calendars = {
          {id(next_event_title_1), id(next_event_start_1)},
          {id(next_event_title_2), id(next_event_start_2)},
          // Add more pairs here as needed
        };

        // Initialize variables for the earliest event
        time_t earliest_time = LONG_MAX;
        std::string event_title;
        struct tm event_tm = {};

        // Check all calendars
        for (const auto& calendar : calendars) {
          if (!calendar.second->state.empty()) {
            time_t event_time = parse_event_time(calendar.second->state);
            if (event_time < earliest_time) {
              earliest_time = event_time;
              event_title = calendar.first->state;
              strptime(calendar.second->state.c_str(), "%Y-%m-%d %H:%M:%S", &event_tm);
              event_tm.tm_isdst = -1;
            }
          }
        }

        // Display the earliest event if we found one
        if (earliest_time != LONG_MAX) {
          // Get dates without time
          time_t currentDate = currentTime - (currentTime % 86400);
          time_t eventDate = earliest_time - (earliest_time % 86400);
          
          // Calculate day difference
          int daysDiff = (eventDate - currentDate) / 86400;
          
          char timeStr[32];
          if (daysDiff == 0) {
            strftime(timeStr, sizeof(timeStr), "Today at %H:%M", &event_tm);
          } else if (daysDiff == 1) {
            strftime(timeStr, sizeof(timeStr), "Tomorrow at %H:%M", &event_tm);
          } else {
            strftime(timeStr, sizeof(timeStr), "%Y-%m-%d at %H:%M", &event_tm);
          }
          
          // Draw the event title and time
          it.printf(240, 450, id(font_small_bold), color_text, TextAlign::TOP_CENTER, "%s", event_title.c_str());
          it.printf(240, 475, id(font_small_medium), color_text, TextAlign::TOP_CENTER, "%s", timeStr);
        }

        // Footer: Refresh Timestamp (see https://community.home-assistant.io/t/esphome-show-time/348903)
        char timeString[17];
        strftime(timeString, sizeof(timeString), "%H:%M", localtime(&currentTime));
        it.printf(240, 750, id(font_tiny_bold), color_text, TextAlign::BASELINE_CENTER, "REFRESHED AT %s", timeString);
      }
